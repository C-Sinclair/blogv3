[{"content":"<h1 id=\"running-my-package-json-test-command-the-hard-way\">Running my package json test command - the hard way</h1>\n<p>Sometimes it can be super handy to have a quick and dirty way of accessing your package json scripts. Maybe you just want to know what the right name to call is. For that <code>jq</code> is our friend.</p>\n\n<pre><code class=\"lang-bash\">cat package.json | jq &#39;.scripts&#39;\n</code></pre>\n<p><code>cat</code> creates a stream of our package json file and pipes the stream to <code>jq</code> which gives us full access to query or manipulate the json.</p>\n<aside> üé® The output also looks pretty neat to human eyes too!\n\n</aside>\n\n<p>Ok cool, so this will output something akin to the following</p>\n\n<pre><code class=\"lang-json\">{\n  &quot;dev&quot;: &quot;next dev&quot;,\n  &quot;build&quot;: &quot;next build&quot;,\n  &quot;start&quot;: &quot;next start&quot;,\n  &quot;lint&quot;: &quot;eslint &#39;*/**/*.{js,ts,tsx}&#39;&quot;,\n  &quot;test&quot;: &quot;jest --env=jsdom --testPathIgnorePatterns /.storybook/*/&quot;\n}\n</code></pre>\n<p>So we can clearly see our <code>test</code> command there. So a layman could just use their mouse (yuck, <em>what an antipattern</em>!) to highlight and then copy the command itself ready for use.</p>\n<p>I say no. We must go further!</p>\n<p>So first we can select the actual command we want.</p>\n\n<pre><code class=\"lang-bash\">cat package.json | jq &#39;.scripts.test&#39;\n# returns\n&quot;jest --env=jsdom --testPathIgnorePatterns /.storybook/*/&quot;\n</code></pre>\n<p>Ok nice, so next issue is those <code>&quot;</code> marks. We can easily strip them with a good ol‚Äô fashioned <code>tr</code></p>\n\n<pre><code class=\"lang-bash\">cat package.json | jq &#39;.scripts.test&#39; | tr -d &#39;&quot;&#39;\n# returns \njest --env=jsdom --testPathIgnorePatterns /.storybook/*/\n</code></pre>\n<p>Very nice, that‚Äôs the actual command right there. Crazy I know!</p>\n<p>So how‚Äôs about we push that into our system‚Äôs clipboard?</p>\n\n<pre><code class=\"lang-bash\">cat package.json | jq &#39;.scripts.test&#39; | tr -d &#39;&quot;&#39; | xclip -sel clipboard\n</code></pre>\n<p>Now you can paste that bad boy in any other program and you‚Äôre away üöÄ</p>\n<h3 id=\"beautiful-compositionality\">Beautiful Compositionality</h3>\n<p>This is possibly my favourite part of the Linux philosophy. Each of these tools does one thing well, and its up to us the humble power user to <em>compose</em> these commands together into a symphony of awesomeness.</p>\n<h3 id=\"interactivity-with-fzf\">Interactivity with FZF</h3>\n<p>Things can start to get really interesting when we incorporate a find and select into this flow.</p>\n\n<pre><code class=\"lang-bash\">cat package.json | jq &#39;.scripts&#39; | head -n -1 | tail -n +2 | fzf\n</code></pre>\n<p>So this will feed each script line into <code>fzf</code> - everyone‚Äôs favourite fuzzy finder.</p>\n<p>Nice. But let‚Äôs take this a step further.</p>\n<p>How about if we could fuzzy search over the available package.json scripts, with a preview of the command itself, and then finally run the highlighted script on select.</p>\n<p>This is getting a bit crazy so we‚Äôll split it over multiple lines, and I will break down each stage after.</p>\n\n<pre><code class=\"lang-bash\">cat package.json \\\\\n| jq &#39;.scripts | keys&#39; \\\\\n| head -n -1 \\\\\n| tail -n +2 \\\\\n| tr -d &#39;&quot;&#39; \\\\\n| tr -d &#39;,&#39; \\\\\n| tr -d &#39; &#39; \\\\\n| fzf --preview=&quot;cat package.json | jq &#39;.scripts[\\\\&quot;{}\\\\&quot;]&#39; | tr -d &#39;\\\\&quot;&#39;&quot; \\\\\n| xargs yarn\n</code></pre>\n<p>Its a bit of a beast, but it works!</p>\n<p>So first off we‚Äôre using <code>&#39;.scripts | keys&#39;</code> in the first <code>jq</code>. This gets us the keys of the scripts object.</p>\n<p>We then have some fun with <code>head</code> and <code>tail</code> to cut away the first and last lines of the array which is returned.</p>\n<p>Next up, <code>tr</code> 3 of them in a row just to remove any characters we aren‚Äôt interested in displaying.</p>\n<p>Piping that to <code>fzf</code> gives us fuzzy search over the items in that list, and the <code>--preview</code> option lets us pick what should be displayed in the right hand preview panel. The option takes a shell string with the currently highlighted record from the list injected wherever <code>{}</code> is seen.</p>\n<p>So we search the package.json scripts again with <code>jq</code> this time picking the exact script currently selected in the fuzzy search. Cut that to size with <code>tr</code> again to get rid of those <code>&quot;</code> (this time escaped as we‚Äôre already inside <code>&quot;</code></p>\n<p>When the user hits enter on one of those record, <code>fzf</code> will pipe the selection to <code>stdout</code> so we catch this with <code>xargs</code> - which will append the piped input to the end of the command, and finally say we want to run <code>yarn</code> followed by the script.</p>\n<p>So if we run this and select ‚Äútest‚Äù say. Then the final result will be <code>yarn test</code></p>\n<p>Boom.</p>\n<p>All that‚Äôs left now is to release this as an npm package... ‚Üê Sarcasm.</p>\n","meta":{"published":"2022-01-05","path":"running-package-json-commands","languages":["Shell"],"tags":["Terminal Tweaks"]},"slug":"running-my-package-json-test-command---the-hard-way","title":"Running my package json test command - the hard way"},{"content":"","meta":{},"slug":"xstate-initialise-child-machine-on-init","title":"Xstate initialise child machine on init"},{"content":"<h1 id=\"grouping-by-fields-in-elasticsearch-\">Grouping by fields in [[ElasticSearch]]</h1>\n<p>Grouping of data is a pretty common requirement in databases. Lets say you have a index (or table or collection depending on your data store&#39;s terminology), it looks somthing like this:</p>\n\n<pre><code class=\"lang-json\">[{\n    &quot;id&quot;: 1,\n    &quot;name&quot;: &quot;Fellowship of the Ring&quot;,\n    &quot;series&quot;: &quot;Lord of the Rings&quot;,\n    &quot;views&quot;: {\n        &quot;total&quot;: 1000000,\n        &quot;last_watched&quot;: &quot;2020-01-01&quot;,\n        &quot;favourite&quot;: false\n    }\n}, {\n    &quot;id&quot;: 2,\n    &quot;name&quot;: &quot;The Two Towers&quot;,\n    &quot;series&quot;: &quot;Lord of the Rings&quot;,\n    &quot;views&quot;: {\n        &quot;total&quot;: 999,\n        &quot;last_watched&quot;: &quot;2017-12-22&quot;,\n        &quot;favourite&quot;: false\n    }\n}, {\n    &quot;id&quot;: 3,\n    &quot;name&quot;: &quot;Return of the King&quot;,\n    &quot;series&quot;: &quot;Lord of the Rings&quot;,\n    &quot;views&quot;: {\n        &quot;total&quot;: 100000000,\n        &quot;last_watched&quot;: &quot;2022-01-01&quot;,\n        &quot;favourite&quot;: true\n    }\n}, {\n    &quot;id&quot;: 4,\n    &quot;name&quot;: &quot;Vol 1&quot;,\n    &quot;series&quot;: &quot;Kill Bill&quot;,\n    &quot;views&quot;: {\n        &quot;total&quot;: 50,\n        &quot;last_watched&quot;: &quot;2016-01-01&quot;,\n        &quot;favourite&quot;: true\n    }\n}, {\n    &quot;id&quot;: 5,\n    &quot;name&quot;: &quot;Vol 2&quot;,\n    &quot;series&quot;: &quot;Kill Bill&quot;,\n    &quot;views&quot;: {\n        &quot;total&quot;: 2,\n        &quot;last_watched&quot;: &quot;2012-10-01&quot;,\n        &quot;favourite&quot;: false\n    }\n}]\n</code></pre>\n<p>So we have films which may are associated with a <code>series</code>, and each have their own metadata about views: <code>total</code>, <code>last_watched</code> &amp; <code>favourite</code>. Each series has its own <code>views.favourite</code>. </p>\n<p>TODO: setup mappings request to match the example</p>\n<p>Lets say we want to get statistics on this (very simple) data comparing how many times it has been viewed - thats the <code>views.total</code> on our case. How would we go about that? </p>\n<p>Answer: <strong>Aggs</strong></p>\n<h3 id=\"aggregations\">Aggregations</h3>\n<p>In [[ElasticSearch]] we have the concept of &quot;Aggregations&quot;. These are ways of collating the data in an index and getting useful metrics out of said data. We compose aggregations using the <code>aggs</code> key:</p>\n\n<pre><code class=\"lang-elasticsearch\">GET /films/_search\n{\n    &quot;aggs&quot;: {\n        &quot;film_insights&quot;: {\n\n        }\n    }\n}\n</code></pre>\n<p>Here <code>film_insights</code> can be any string. It will just be the key which is returned to the us in the response object: </p>\n\n<pre><code class=\"lang-json\">{\n    ... // loads of other cruft not useful to our example\n    &quot;aggregations&quot;: {\n        &quot;film_insights&quot;: {\n            ... // other things not relevant for now\n            &quot;buckets&quot;: [\n                // in here live our &quot;groups&quot; split by their &quot;series&quot; values\n                {\n                    &quot;key&quot;: &quot;Lord of the Rings&quot;,\n\n                },\n                {\n                    &quot;key&quot;: &quot;Kill Bill&quot;,\n\n                }\n            ]\n        }\n    }\n}\n</code></pre>\n<h4 id=\"keyword-field-type-required\">Keyword Field Type Required</h4>\n<p>ElasticSearch won&#39;t be happy if the <code>series</code> field is of type <code>text</code> - it needs to be a <code>keyword</code> type in order to be able to aggregate across it. </p>\n\n<pre><code>The `keyword` field can be thought of like an `id`. ElasticSearch won&#39;t break it up when its doing its clever BTree-ing and will instead search the field using the full string value\n</code></pre>\n<h3 id=\"size-0-is-ok\">Size 0 is OK</h3>\n<p>If we&#39;re only interested in the aggregations on top of the data rather than the data itself, its ok to add a <code>&quot;size&quot;: 0</code> to the top level of the query. This will prevent data from being returned in the top level &quot;hits&quot; response key.</p>\n\n<pre><code class=\"lang-elasticsearch\">GET /films/_search\n{\n    &quot;size&quot;: 0,\n    &quot;aggs&quot;: {\n        ...\n</code></pre>\n<h3 id=\"nesting-aggregations\">Nesting Aggregations</h3>\n<p>When things get really interesting is being able to nest aggregations. So lets say you wanted to group <code>favourite</code> films which are grouped by their series. Well that can be done via nesting.</p>\n<h3 id=\"references\">References</h3>\n\n<ul>\n<li><a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html\">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations.html</a></li>\n</ul>\n","meta":{"path":"grouping-by-fields-in-elasticsearch","tags":["ElasticSearch"]},"slug":"grouping-by-fields-in-elasticsearch","title":"Grouping by fields in ElasticSearch"},{"content":"<h1 id=\"the-clickbait-title-has-done-its-job\">The Clickbait Title Has Done Its Job</h1>\n<p>100% of bugs come from <code>useEffect</code></p>\n","meta":{},"slug":"useeffect-is-an-antipattern","title":"UseEffect Is An Antipattern"},{"content":"","meta":{},"slug":"using-xstate-instead-of-context","title":"Using XState instead of Context"},{"content":"<p>1</p>\n","meta":{},"slug":"midi-controller-into-shell-commands","title":"Midi Controller into shell commands"},{"content":"<h1 id=\"git-squasher\">Git Squasher</h1>\n\n<pre><code>üî• Instructions on how to implement single commit branches\n</code></pre>\n<p>Get commit SHA of the point where the feature started, this will usually be where you branched off of development.</p>\n<p>The below displays a list of commits from newest to oldest with their SHA&#39;s</p>\n\n<pre><code class=\"lang-tsx\">git log --oneline --max-count=20 \\\\\n    | nl -v0 \\\\\n    | sed &#39;s/^ \\\\+/&amp;HEAD~/&#39;\n</code></pre>\n<p>On feature branch</p>\n\n<pre><code class=\"lang-tsx\">git rebase --interactive [COMMIT_SHA]\n</code></pre>\n<p>This will open up vim with a list similar to:</p>\n\n<pre><code class=\"lang-tsx\">pick asjhdjabndakjhsd &quot;my commit message&quot;\npick 90a89sdjkasdhasd &quot;my really awesome commit&quot;\npick a0089df87sasd9as &quot;my nan writes better code than this commit&quot;\npick 90asdadas8d7ajsd &quot;initial commit&quot;\n</code></pre>\n<p>Run the vim command <code>:%s/pick/s</code> This will change all those picks to <em>squashes</em>. Then go to the first commit by running <code>gg</code> followed by <code>r</code> (replace mode) and then <code>p</code> so that only this commit is picked. <code>wq</code> to save and exit.</p>\n<p>Next you&#39;ll be prompted to decide on a commit message, so a new vim environment will appear. <code>dG</code> will delete everything in the file <code>i</code> for insert mode, and then write your desired commit message. <code>wq</code> to save and exit.</p>\n<p>Phew, with all that done we can overwrite the changes in the remote repo</p>\n\n<pre><code class=\"lang-tsx\">git push -f origin HEAD\n</code></pre>\n<p>Finally (and I mean finally) we can merge our branch into development once again (remember to pull first!)</p>\n\n<pre><code class=\"lang-tsx\">git checkout development\ngit pull\ngit merge [FEATURE_BRANCH]\ngit push\n</code></pre>\n","meta":{"path":"git-squasher","languages":["Git","Shell"]},"slug":"git-squasher","title":"Git Squasher"},{"content":"<p>Using [[Charm]] to host a blog over ssh</p>\n<p>[[2022-02-27]]</p>\n","meta":{},"slug":"ssh-blog","title":"SSH blog"},{"content":"","meta":{},"slug":"network-requests-in-lua","title":"Network Requests In Lua"},{"content":"<h1 id=\"fuzzy-github-stars\">Fuzzy Github Stars</h1>\n<h3 id=\"tldr-\">TLDR;</h3>\n<p>Another gushy post with Conor going on and on about how great <code>fzf</code> is and just another way it can be used to make your terminal life all the better.</p>\n<h3 id=\"github-stars-as-a-bookmarking-system\">Github Stars as a bookmarking system</h3>\n","meta":{},"slug":"fuzzy-github-stars","title":"Fuzzy Github Stars"},{"content":"<h1 id=\"solid-is-solid\">Solid is Solid</h1>\n\n<pre><code>ü™ñ Solid in a good way.\n</code></pre>\n<p>No more manually managing dependency arrays to trigger re-renders.</p>\n<h3 id=\"clickbait-temptation\">Clickbait Temptation</h3>\n<p>I was very tempted to name this article &quot;SolidJS, the React killer?&quot; or some such click-bait title. But does the world need more rhetoric?</p>\n<p>No.</p>\n<h3 id=\"i-m-a-react-guy\">I&#39;m a React guy</h3>\n<p>Just to be completely straight here. I&#39;m a React guy. I love React. I&#39;m that cool kid at parties, sat in the kitchen discussing how <code>useMemo</code> should be better well known.</p>\n<p>But I&#39;ll be the first to say it. React is complicated.</p>\n<p>The hardest part of React is knowing when a re-render will occur, and what caused it.</p>\n<h3 id=\"enter-solidjs\">Enter SolidJS</h3>\n<p>Solid follows a different model.</p>\n<p>Your component is only called once - like any other bog standard regular Javascript function. This component function will auto-magically go through and assign basically event listeners on all of your stateful variables.</p>\n<p>In short this means that you never have to care about where state is being subscribed to. Variables which are derived from other stateful variables are more than capable of looking after themselves.</p>\n\n<pre><code>üï∂Ô∏è This is very cool\n</code></pre>\n<p>However...</p>\n<h2 id=\"there-are-footguns\">There are footguns</h2>\n<p>![[footgun.jpg]]</p>\n<p>If you aren&#39;t careful about how you destruct stateful variables, you&#39;ll end up with static ones.</p>\n<p>This does actually make perfect sense, ultimately these are just JS functions, nothing more.</p>\n<h3 id=\"prop-destructuring\">Prop destructuring</h3>\n<p>In React its pretty much muscle memory to do the following:</p>\n\n<pre><code class=\"lang-bash\">function Component({ onClick, value = &#39;Some default value&#39; }) {\n</code></pre>\n<p>This code could be valid Solid code as well. However, the prop variables for <code>onClick</code> or <code>value</code> will never change. They will be in effect static values.</p>\n<p>This is because under the hook what is really happening here is something like this</p>\n\n<pre><code class=\"lang-bash\">function Component(props) {\n    const onClick = props.onClick\n    const value = props.value || &#39;some default value&#39;\n</code></pre>\n<p>So <code>props.onClick</code> and <code>props.value</code> are assigned to new variables <code>onClick</code> and <code>value</code></p>\n<p>Solid only knows about and monitors <code>props</code> If we go pulling it apart and assigning variables to things, Solid is not going to know what needs to be done.</p>\n<p>So basically, there is some un-learning of habits picked up from React best practices needed.</p>\n<p>But if you weigh up this additional cognitive load against the behemoth that is the React render cycle... well need I even compare?</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Solid is awesome. Well worth a gander.</p>\n<p>Its not just the fact its the fastest JS framework (against some stiff competition). Its model of reactivity is very interesting, and the way everything builds on top of this core primitive is very cool.</p>\n","meta":{"published":"2021-12-04","path":"solid-is-solid","languages":["Javascript"],"tags":["SolidJS","React"]},"slug":"solid-is-solid","title":"Solid is Solid"},{"content":"<h1 id=\"a-morning-ruined-by-pop\">A morning ruined by Pop</h1>\n<blockquote>\n<p>üí° The tale of how Pop OS stole a morning from me</p>\n</blockquote>\n<p>Its 5pm. Its a Wednesday.</p>\n<p>I&#39;m hacking on a new Docker build pipeline for my project at work. Basically the backend would be a whole lot nicer to work in if it had a consistent build and deployment, but alas this is likely the topic for another piece.</p>\n<p>Suffice as to say, I&#39;m experimenting with some new paradigms.</p>\n<p>Hours pass, I try many failing experiments. Frustration is mounting, inadequately counter balanced by the small progress made towards my shining goal on the horizon.</p>\n<p>My build reaches step 22 of 36. A new record. Rejoice rejoice.</p>\n<p>The error feels like one I should be able to tackle with relative ease, so I tell myself this is the last run.</p>\n<p>I re-jig the Dockerfile a final time and run ye olde faithful <code>docker build -t NOT_THE_REAL_NAME .</code></p>\n<p>A new failure. Earlier in the Dockerfile. &quot;No space on disk&quot;. Great. And its on the root partition. This is the one which stores all of the global packages and apps on my PopOS machine. Basically whenever you do a <code>sudo apt install</code> it will be installing to one of the scary depths of the root partition (specifically <code>/var/cache/apt/archives</code> in that case).</p>\n<p>I suppose at this point I should paint the landscape of my machine. The PopOS install consists of 4 partitions:</p>\n\n<ul>\n<li>Home partition <code>/home/</code> - my stuff</li>\n<li>Root partition <code>/</code> - system stuff</li>\n<li>Swap partition - a place for RAM stuff to happen</li>\n<li>Boot partition - a lot more of this spicy fella to come</li>\n</ul>\n<p>So its pretty neat right? Operating system stuff is safely segregated from my home files. If disaster was to strike I&#39;d have a chance of retrieving my home files.</p>\n<p>Spoiler alert* - disaster may strike.</p>\n<p>Anyway, so no stress right, just clear out some old cached packages and root will limber on happy enough to not bother me during my important work.</p>\n\n<pre><code class=\"lang-bash\">sudo apt-get clean\nsudo apt-get autoclean\nsudo apt-get autoremove\n</code></pre>\n<p>There is differences between what each does, but I was under the impression that throwing this trifecta of cleanliness down on a TTY was enough to purge any outdated or unused packages and give you back that bit of headroom needed to move forward in life.</p>\n<p>This brings us onto the topic of <a href=\"https://en.wikipedia.org/wiki/Linux_kernel\">Linux Kernels</a>, they are often one of the more sizeable packages which need cleaning. They get updated reasonably often, and the old ones can be kept hanging around, but really you only need the previous one (in case of a kernel related emergency and rollback is the only option). Hold that thought.</p>\n<p>So I pack up for the night. My head is a mess from the docker madness.</p>\n<p>Skip forward til morning. Coffee in hand I go to power up my workstation.</p>\n<p>I&#39;m greeted by a mess of what I assume is text cassading from right to left at a disjointed angle on a black background. WTF?</p>\n<p>I slam on the keyboard, I disconnect and reconnect and redisconnect the monitors, the power supply, I jiggle the mouse I disconnect the mouse and jiggle the trackpad. No use. So I start a methodically off and on again routine. Off and on, same result, off and on again, same same.</p>\n<p>The moment of panic eventually passes as I remember that this is not the only tool in my tool belt. I do know some things about this stuff. At least that&#39;s what I tell management.</p>\n<p>I power off by holding the power button and then back on, but this time I bang all the F keys repetitively. One of them I&#39;m sure triggers the opening of BIOS settings. I don&#39;t get it the first try so I focus my fingering to the first 3 keys. Success. It is one of them (I still don&#39;t know which one, but think maybe its F1 or F2).</p>\n<p>Ok so BIOS is fine, that means the hardware is somewhat OK at least. I mean its basically always a software issue right!</p>\n<p>I should probably note that time is ticking at this point. I have my daily standup at 9.15. Thankfully I got cracking early today. A roll-out-of-bed-and-get-to-it approach would not have worked at all on a day like today. But there&#39;s pressure. I need this machine to work to be able to dial in.</p>\n<p>9am rolls around. This is clearly going to take longer to sort than the 15 minutes I have left before I have to face to digital face with the team.</p>\n<p>Time to cut my losses and hop onto my personal machine. Its a little dusty but functional at least.</p>\n<p>I get all my work accounts setup and dial in on time to the standup. There are jokes about my incompetence (made mostly by me!) My manager swears that this occurrence happens at least once a year for Linux users. I&#39;m inclined to agree. In fact once a year sounds pretty stable in comparison to my setups. Queue the Arch flashbacks ü™ñ</p>\n<p>Back to the coalface. I need my machine back.</p>\n<p>Where is that USB flash drive I have? I&#39;m sure I have multiple, but of course when they&#39;re needed most is when they choose to disappear. Why do I need a flash drive? I need something to boot into. My machine is thundering into BIOS just fine, so the issue is clearly happening after this point. That&#39;s when the hand off to your OS of choice happens.</p>\n<p>I eventually beg my partner to give me one and thankfully the one she finds is 8Gb - big enough to hold an ISO for a distro I can boot from. I slam the stick into my personal machine and get a PopOS ISO downloading. When its done I use USB Flasher to flash the ISO onto the flash drive.</p>\n<p>![[flasher 1.png]]</p>\n<p>Flashing complete, time to put it to use.</p>\n<p>So from Bios I boot into the USB drive I&#39;m welcomed by the familiar PopOS welcome screen, as if I was starting a fresh install. I find the terminal so I can check what&#39;s going on with the machines harddrives.</p>\n<p><code>lsblk</code> is the command to see what drives and partitions are available. Using this I work out which partitions relate to my home and root and boot partitions.</p>\n<p><code>sudo mount /dev/sda4 /mnt/safezone</code> is how you take one of those partitions and mount it ready for action. The sda4 part might be different depending on how your hardrive is set up. Also safezone any name.</p>\n<p>So I mount the root partition o</p>\n<h3 id=\"final-thoughts\">Final Thoughts</h3>\n<p>There&#39;s been quite a load of Pop-<code>bash</code>ing (in and out of the terminal lol!) but I just want to be clear that overall Pop is a freaking great distro. Its 100% up there as one of my favourites. The theming is crisp and beautiful. I think of it as the closest thing to a Mac-like experience to be found in Linux land. Or at least so far that I&#39;ve found.</p>\n<p>Other than this hiccup, the only other major annoyance I have with Pop is the tendency to constantly change around what <code>Cmd + P</code> does. Not sure if this is just me but sometimes it switches applications - think that was my choice of setting if I remember correctly - and other times it decides to bring up a change display function menu which I can&#39;t get out of and whichever option I pick ruins my carefully picked 3 monitor setup. Small bugbear.</p>\n<p>Here&#39;s a great <a href=\"https://askubuntu.com/a/846172\">comment</a> on whether the Swap partition is structured or not. The answer is no, <em>but</em> it can be. <a href=\"https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt\">rootfs</a> and initramfs are on the structured side, and its the initramfs which is inside the boot partition. Interesting!</p>\n<h3 id=\"references-\">References:</h3>\n<p><a href=\"https://askubuntu.com/a/846172\"></a><a href=\"https://askubuntu.com/a/846172\">https://askubuntu.com/a/846172</a></p>\n<p><a href=\"https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt\"></a><a href=\"https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt\">https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Linux_kernel\"></a><a href=\"https://en.wikipedia.org/wiki/Linux_kernel\">https://en.wikipedia.org/wiki/Linux_kernel</a></p>\n","meta":{},"slug":"a-morning-ruined-by-pop","title":"A Morning Ruined By Pop"},{"content":"","meta":{},"slug":"creating-a-neovim-plugin-with-a-luarock","title":"Creating a Neovim plugin with a LuaRock"},{"content":"<h1 id=\"sequel-no-sequel-back-again\">Sequel/No Sequel &amp; Back Again</h1>\n<p>I come from the land of SQL. I spent my first professional <em>dev</em> gigs learning the intricacies of how [[MySQL]] works, how to design data structures for speed and efficiency, and most of all, trying to keep data in sync with application and user requirements.</p>\n<p>Back then I was using the horrors of [[PHP]]. The LAMP stack isn&#39;t particularly fashionable these days, but you could certainly get things done. Badly, but they would get done. </p>\n\n<pre><code>The topics of PHP, SQL injection and other bad practices and security no no&#39;s are outside of the current scope\n</code></pre>\n<p>When I first discovered [[Mongo]] it was a revelation. NoSQL offers a lot of powerful paradigm changes, people will talk about scalability etc. But for me the best part was not having to think about the schema the data </p>\n","meta":{"path":"sql-nosql-and-back","languages":["SQL"],"tags":["Databases","Mongo","MySQL"]},"slug":"sequel-no-sequel-back-again","title":"Sequel No Sequel Back Again"},{"content":"<p>Running <code>docker</code> was giving me a &quot;could not connect to Unix socket&quot; error when trying to call any of the docker commands (<code>docker info</code> is a great test command to see if all is well with your install).</p>\n<p>However, <code>sudo docker info</code> was completely fine. Seems like the Unix socket is not owned or accessible to my current user. </p>\n<p>No problem, I just need to be added to the <code>docker</code> <code>group</code> on my machine.</p>\n\n<pre><code class=\"lang-shell\"> sudo groupadd docker\n</code></pre>\n<p>That command will create the <code>docker</code> group if it doesn&#39;t already exist.</p>\n\n<pre><code class=\"lang-shell\">sudo gpasswd -a $USER docker\n</code></pre>\n<p>And that command will add the current <code>$USER</code> to said group. </p>\n<p>EZPZ! </p>\n<p><code>docker info</code> will now run with flying colours.</p>\n","meta":{},"slug":"accessing-docker-from-non-root-$user","title":"Accessing Docker From Non-Root $User"},{"content":"<h1 id=\"vercel-for-backend\">Vercel For Backend</h1>\n\n<ul>\n<li>Go into middleware and api routes features and using them decoupled from [[NextJS|Next]]</li>\n</ul>\n","meta":{},"slug":"vercel-for-backend","title":"Vercel For Backend"},{"content":"<h1 id=\"fast-and-dirty-favicon\">Fast and dirty favicon</h1>\n<p>We‚Äôve all been there. We need a favicon for our new shiny website, but its in the wrong bloody format.</p>\n<p>Legends across the internet have spoken of a tool. A single tool so mighty, it can handle any image, video or audio manipulation any young squire could possibly dream up.</p>\n<p>That tool... is <code>ffmpeg</code></p>\n<p>If you don‚Äôt know, its well worth getting to know. This guy is the OG.</p>\n<aside> üëÜ With great power comes great potential for confusion.\n\n</aside>\n\n<p>So luckily for us the task at hand is about as simple as it gets with <code>ffmpeg</code></p>\n<p>I have a <code>jpeg</code> file. Its a beautiful image of me.</p>\n<p>![[me.jpeg]]\nLovely.</p>\n<p>Now favicons <em>can</em> be pretty much any file format, here‚Äôs a <a href=\"https://en.wikipedia.org/wiki/Favicon#File_format_support\">chart for reference</a>, but not all image formats are created equally.</p>\n<p>For the purposes of this article, I have arbritrarily decided that the format for my favicon should be png.</p>\n<p>Now <code>ffmpeg</code> is clever. You can give it an input file, and specify an output file name and it will automagically turn your image from one format to the other.</p>\n\n<pre><code class=\"lang-bash\">ffmpeg -i ./me.jpeg ./favicon.png\n</code></pre>\n<p>Here we say ‚Äúoi, <code>ffmpeg</code> do us a favour and take this input file (<code>-i</code> for input file/stream followed by the path to the file) and output me a <code>./favicon.png</code>‚Äù</p>\n<p>And in a flash <code>ffmpeg</code> does the deed.</p>\n<p>Nice one <code>ffmpeg</code></p>\n<h3 id=\"references\">References</h3>\n\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Favicon\">https://en.wikipedia.org/wiki/Favicon</a></li>\n</ul>\n","meta":{"published":"2021-12-28","path":"fast-and-dirty-favicon","languages":["Shell"],"tags":["FFMpeg"]},"slug":"fast-and-dirty-favicon","title":"Fast and dirty favicon"},{"content":"<h1 id=\"find-and-stop-systemd-services\">Find and stop [[systemd]] services</h1>\n<p>I use Caddy server on occasion for work. Its awesome. Well worth looking into, and I‚Äôm sure I‚Äôll write a more in depth piece on its finer points sometime, but for now its the object of this particular narrative, not the focus.</p>\n<p>So I kept finding that when I went to start Caddy with a custom configuration, it would fail due to the ports required for Caddy to run being already in use.</p>\n<p>A bit of delving using our handy CLI toolbox identifies which process is hogging the port in question (2019)</p>\n\n<pre><code class=\"lang-bash\">sudo netstat -nlp | grep :2019\n#=&gt;  tcp  0  0  127.0.0.1:2019  0.0.0.0:*  LISTEN  18648/caddy\n</code></pre>\n<p>So Caddy is already running...</p>\n<p>This is strange as I never started that process.</p>\n<p>For a while I took the amateur‚Äôs way out, and just killed the running Caddy process, before starting my own.</p>\n\n<pre><code class=\"lang-bash\">sudo pkill caddy\n</code></pre>\n<p>But c‚Äômon, we all know we can do much better than that.</p>\n<p>The next clue as to why this keeps happening is the fact that this ghost Caddy process will be present from every time I start my machine. In Linux, <code>systemd</code> is responsible for starting processes at given times - like after boot. It does this via ‚Äúservices‚Äù. If a service is enabled then it will fire up on boot of the OS.</p>\n<p>We can find all the currently enabled services with a <code>systemd list-unit-files --state=enabled</code> command, but this will return us a bit of a beast of a list. So let‚Äôs pipe it to our old friend <code>fzf</code> (<code>grep</code> would be a fine choice as well).</p>\n\n<pre><code class=\"lang-bash\">systemd list-unit-files --state=enabled | fzf\n</code></pre>\n<p>I start typing Caddy and there it is: ‚Äúcaddy.service enabled enabled‚Äù. So all we need to do is <code>systemd disable</code> it and we‚Äôll stop the service from being started on boot!</p>\n\n<pre><code class=\"lang-bash\">systemd disable caddy.service\n</code></pre>\n<p>And there we have it. Another minor annoyance solved, and literally seconds every day saved! Incredible!</p>\n","meta":{"path":"find-and-stop-systemd-services","dev.to":"https://dev.to/csinclair/find-and-stop-systemd-services-b7k","language":["shell","OS"],"tags":["Linux woes"]},"slug":"find-and-stop-systemd-services","title":"Find and stop systemd services"},{"content":"<h1 id=\"abc-s-of-javascript-apply-bind-call\">ABC&#39;s of Javascript - Apply, Bind &amp; Call</h1>\n<p>Here&#39;s a super quick reference of how each of the confusing initially confusing JS function <code>apply</code> , <code>bind</code> &amp; <code>call</code></p>\n\n<pre><code class=\"lang-jsx\">let x = { \n  n: 1, \n  log: function(arg1, arg2) { \n    console.log(this.n, arg1, arg2) \n  }\n}\n\nconsole.log(&#39;raw&#39;)\nlet log = x.log\nlog(&#39;in this case&#39;, &#39;this refers to global this&#39;)\n\nconsole.log(&#39;apply&#39;)\nx.log.apply({ n: 2 }, [&#39;in this case&#39;, &#39;this refers to first apply arg&#39;])\n\nconsole.log(&#39;bind&#39;)\nlet bound = x.log.bind({ n: 3 })\nbound(&#39;in this case&#39;, &#39;this refers to prebound object&#39;)\n\nconsole.log(&#39;call&#39;)\nx.log.call({ n: 4 }, &#39;in this case&#39;, &#39;same as apply, but with args in list not array&#39;)\n</code></pre>\n<p>Really <code>apply</code> and <code>call</code> are the same just with different ways of passing the function&#39;s actual arguments.</p>\n\n<pre><code class=\"lang-jsx\">let args = [1,2]\nlet fn = { \n  log: function(a1, a2) { \n    return this.n + a1 + a2 \n  } \n}.log\n\nlet a = fn.apply({ n: 1 }, args)\nlet c = fn.call({ n: 1 }, ...args)\nconsole.log(a === c)\n</code></pre>\n","meta":{"path":"abc-apply-bind-call","languages":["Javascript"]},"slug":"abc's-of-javascript---apply,-bind-&-call","title":"ABC's of Javascript - Apply, Bind & Call"},{"content":"<h1 id=\"that-time-i-cost-my-buddy-180-in-aws-bills\">That Time I Cost My Buddy $180 In AWS Bills</h1>\n<p>A while ago a friend of mine asked for some dev assistance with </p>\n","meta":{},"slug":"that-time-i-cost-my-buddy-$180-in-aws-bills","title":"That Time I Cost My Buddy $180 In AWS Bills"},{"content":"<h1 id=\"classes-as-state-management-machines\">Classes as state management machines</h1>\n<p>Classes are an excellent tool in any developers digital toolbelt, at least in programming languages which feature classes.</p>\n<p>Some languages go too far in my opinion. The bulky traditional OO languages (Queue Java flashbacks) in which everything is a class, all things are defined as classes, that in opinion is too much. Theres just way too much ceremony involved [link to POJOs]</p>\n<p>I found that I stayed away from classes for a long time in favour of functional paradigms. small contained functions which handle simple (or not so simple) objects. Classes can actually slot themselves quite nicely into this architecture.</p>\n<h3 id=\"static-methods\">Static methods</h3>\n<p>In Typescript, I&#39;m a big fan of using classes with static methods to wrap functions into a single ‚Äúscope‚Äù - perhaps ‚Äúmodule‚Äù would be better nomenclature here.</p>\n<p>For instance, which do you find to be the most idiomatic?</p>\n\n<pre><code class=\"lang-jsx\">const user = getMeUser()\nconst user2 = someOtherUser()\n/** OR */\nconst user = User.getMe()\nconst user2 = User.someOther()\n</code></pre>\n<p>Not much difference in terms of grammar and probably just personal preference as to which you prefer. But I would argue that the second option clearly shows at a glance that the two functions (or ‚Äúmethods‚Äù since they&#39;re on a class) are in the same context. They&#39;re both <code>User</code> related.</p>\n<h3 id=\"asynchronous-instance-factories\">Asynchronous instance factories</h3>\n<p>One major limitation of using classes in the more standard way - with the <code>new</code> keyword, is the lack of asynchronousity. You cant do <code>await new User()</code></p>\n<p>To get around this limitation you can hijack the instance creation for a class. First off the <code>constructor</code> needs to be <code>private</code> so that only the class itself can call it. We then use a static method to call the <code>constructor</code> this could look a little like this</p>\n\n<pre><code class=\"lang-jsx\">class User {\n  private constructor() {}\n  static async get() {\n    // do some async eork \n    return new User()\n  }\n}\n</code></pre>\n<p>This allows us to do the important async stuff and then hand back our instance of the class.</p>\n<p>Good stuff, what&#39;s next?</p>\n<h3 id=\"class-proxies\">Class proxies</h3>\n<p>What about if we want to dynamically access values held inside the class as if it was a regular property?</p>\n<p>Wait, what?</p>\n<p>Just bare with.</p>\n<p>So say you get a response from an API to get the user. You want to make a request to this API and return a class with methods to fetch more data or access data which has already been fetched.</p>\n<p>For such a mythical beast you&#39;ll want to implement <code>Proxy</code>s.</p>\n<p>A proxy is a kind of wrapper around an object which hijack what the requested input is and either direct the input to the original object, or do some other thing. They&#39;re great for if you want to transform properties or restrict capabilities of an object.</p>\n<p>So we&#39;ll start by adding a <code>private</code> property to our User class</p>\n\n<pre><code class=\"lang-tsx\">private response?: UserAPIResponse\n</code></pre>\n<p>And then we&#39;ll assign it inside our get method.</p>\n\n<pre><code class=\"lang-tsx\">static async get() {\n  const response = await fetch(`example.com`)\n  const instance = new User()\n  instance.response = response\n  return instance\n}\n</code></pre>\n<p>Ok so this is great, we&#39;ve cached the Api response. We can&#39;t actually access it since it&#39;s private but it&#39;s there.</p>\n<p>So say we have a field returned to us called ‚Äúname‚Äù. This would be present in the private response object, but we want to access it as if it was a regular property on the class. We could manually add the get name method</p>\n\n<pre><code class=\"lang-tsx\">get name () {\n  return this.response.name\n}\n</code></pre>\n<p>Or we&#39;d need to add the name as a public property on the class.</p>\n<p>But when we want to add additional fields to our Api in future were going to have to jot down even more boilerplate. So this is not a great implementation.</p>\n<p>We can improve upon it by adding a proxy to do a lookup of the response object when looking for the instances fields.</p>\n\n<pre><code class=\"lang-tsx\">private constructor () {\n  return new Proxy(this, {\n    get(target, prop) {      \n      if (target.response &amp;&amp; target.response.hasOwnProperty(prop)) {      \n        return target.responss[prop as keyof UserAPIResponse];  \n      }    \n      if (target.hasOwnProperty(prop)) {          \n        return target[prop as keyof User];    \n      }     \n    },\n  })\n}\n</code></pre>\n<p>We have to do a bit of Typescript soothing to keep the squigglies at bay here with the <code>as keyof</code> part. But basically the important part of this is the <code>get(target, prop)</code></p>\n<p>Function. Here we&#39;re checking if a given property name described by <code>prop</code> is present on the response private field, and if not look on the main object&#39;s properties.</p>\n<p>This means we can access the name in a nice sucinct way.</p>\n","meta":{},"slug":"classes-as-state-management-machines","title":"Classes as state management machines"},{"content":"<p>A dip into [[Lua]] and implementing classes from tables.</p>\n","meta":{},"slug":"classes-from-tables","title":"Classes From Tables"},{"content":"<h1 id=\"force-sequencial-promises\">Force sequencial promises</h1>\n\n<pre><code class=\"lang-tsx\">await res.items.reduce(async (acc: Promise&lt;void&gt;, item) =&gt; {\n    return acc.then(async () =&gt; {\n        // do stuff!\n    });\n}, Promise.resolve());\n</code></pre>\n<p>Sometimes you need to sequentially run a list of promises. This is a perfect candidate for a reduce function, as we can pass the currently executing promise from the previous iteration into the next iteration, and await for its result.</p>\n<p>We could even use that previous result, but for this particular example, a simple <code>Promise.resolve()</code> which equates to a <code>Promise&lt;void&gt;</code> type will suffice</p>\n","meta":{"path":"force-sequencial-promises","languages":["Javascript","Typescript"]},"slug":"force-sequence-of-promises","title":"Force sequence of promises"},{"content":"<h1 id=\"hide-implementation-details-from-custom-hooks\">Hide implementation details from custom hooks</h1>\n<p>To follow a much more declarative programming style we should hide implementation details from custom hooks. An example of this would be returning <code>dispatch</code> from a hook that has a <code>useDispatch</code> hook inside it</p>\n<h2 id=\"example\">Example</h2>\n<h3 id=\"bad\">Bad</h3>\n\n<pre><code class=\"lang-typescript\">function useBadPractice() { 2 const [state, dispatch] = useReducer(someReducer, initialState) 3 return { 4 state, 5 dispatch 6 } 7}\n</code></pre>\n<h3 id=\"good\">Good</h3>\n\n<pre><code class=\"lang-typescript\">type UseGoodPractice = { \n    /**\n     * Here is my chance to be really clear and explicit about this piece of data\n     * Maybe there are some considerations in its use, or what it relates to \n     * Super easy to just chuck that here in the doccomment \n     * Doccomments are visible on hover in most IDE&#39;s, so the consumer of this hook 7 * will have great confidence in the use of this state item \n     */ \n     specificThing: string[] 10 /** 11 * Again, a doccomment describing any non obvious action can be described here 12 */ 13 updateSpecificThing: (argsOrWhatever: { foo: string }) =&gt; void 14 /** 15 * More than anything though, a good name goes a long way 16 * Try to describe exactly what will happen when the function is triggered 17 */ 18 incrementSomethingSpecial: () =&gt; void 19} 20 21function useGoodPractice(): UseGoodPractice { 22 const [state, dispatch] = useReducer(someReducer, initialState) 23 24 const updateSpecificThing = useCallback((argsOrWhatever) =&gt; { 25 dispatch({ type: &#39;UPDATE_SPECIFIC_THING&#39;, payload: { specific: argsOrWhatever } }) 26 }, [dispatch]) 27 28 const incrementSomethingSpecial = useCallback(() =&gt; { 29 dispatch({ type: &#39;INCREMENT_ME_BABY&#39; }) 30 }, [dispatch]) 31 32 return { 33 specificThing: state.bit.which.matters, 34 updateSpecificThing, 35 incrementSomethingSpecial, 36 } 37}\n</code></pre>\n<h2 id=\"but-why-\">But Why?!</h2>\n<p>That probably just looks like more boilerplate right?</p>\n<p>Correct, it is.</p>\n<p>BUT, this way gives a very explicit <code>interface</code> boundary. The return type of the hook is a <a href=\"https://en.wikipedia.org/wiki/Facade_pattern\" title=\"https://en.wikipedia.org/wiki/Facade_pattern\">Facade</a>, masking the inner complexity. We could change anything inside the hook, we could use <a href=\"https://xstate.js.org/\" title=\"https://xstate.js.org/\">XState</a> to power of state, or anything else, and as long as the interface described by <code>UseGoodPractice</code> does not change, all users (ie. components) of this hook will not have to change anything.</p>\n<p>The <code>UseGoodPractice</code> type also provides us with a great place to communicate across time with developers on the project, here we can add any additional detail which may be useful to be aware of when interacting with this piece of logic.</p>\n<h2 id=\"why-usecallback-\">Why UseCallback?</h2>\n<p>In the above example, each function which is returned from the hook is wrapped in a <a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" title=\"https://reactjs.org/docs/hooks-reference.html#usecallback\">useCallback</a> hook. This hook is used to <a href=\"https://en.wikipedia.org/wiki/Memoization\" title=\"https://en.wikipedia.org/wiki/Memoization\">Memoize</a> these functions, meaning that React won‚Äôt re-render them when this hook re-renders.</p>\n<blockquote>\n<p>Why is that important?</p>\n</blockquote>\n<p>Well let me tell you.</p>\n<p>When a React component has a function passed to it via props, React is unable to decide whether or not that function has changed between renders, so React will presume it has changed and will re-render the component. This can get expensive when many components have this issue or in a tree of a lot of components.</p>\n<p>The solution to prevent this behaviour is to wrap the function in a <code>useCallback</code> and memoize it.</p>\n<p>If we stick to using <code>useCallback</code> in our hooks for all callback functions, we won‚Äôt need to worry about where we pass those functions. React will understand what they refer to and won‚Äôt try to re-render the component tree on every render.</p>\n","meta":{},"slug":"hide-implementation-details-from-custom-hooks","title":"Hide implementation details from custom hooks"}]